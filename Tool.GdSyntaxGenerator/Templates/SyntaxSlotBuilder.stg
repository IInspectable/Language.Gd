delimiters "<", ">"

Begin(model, context) ::=<<
<writeFileHeader(context)>
using JetBrains.Annotations;
using Pharmatechnik.Language.Gd.Internal;

namespace <model.Namespace>.Antlr {
   
    partial class GdSyntaxSlotBuilder: GdGrammarBaseVisitor\<SyntaxSlot> {

		<writeVisitMethods(model.Slots)>
	}
}
>>

writeVisitMethods(syntaxSlots) ::=<<
<syntaxSlots:writeVisitMethod(); separator="\r\n">
>>

writeVisitMethod(syntaxSlot) ::=<<
public override SyntaxSlot Visit<syntaxSlot.RuleName>([CanBeNull] GdGrammar.<syntaxSlot.RuleName>Context context) {
	return new <syntaxSlot.RuleName>SyntaxSlot(
		<writeParameterList(syntaxSlot.Slots)>
	);
}

>>

writeParameterList(slots) ::=<<
<slots:writeParameter(); separator=",\r\n">
>>

writeParameter(slot) ::=<<
<if(slot.IsToken)><slot.ParameterName>Token: <slot:writeTokenParameter()><else><slot.ParameterName>: <slot:writeSyntaxParameter()><endif>
>>

// TODO Optionale Tokens!!
writeTokenParameter(tokenSlot) ::=<<
GetTokenSlot(context?.<tokenSlot.Name><if(tokenSlot.IsLabeled)><else>()?.Symbol<endif>, SyntaxKind.<tokenSlot.SyntaxKind>)
>>

writeSyntaxParameter(syntaxSlot) ::=<%
<if(syntaxSlot.IsOptional)>
<writeOptionalParameter(syntaxSlot)>
<elseif(syntaxSlot.IsRequired)>
<writeRequiredParameter(syntaxSlot)>
<elseif(syntaxSlot.IsOneOrMore)>
<writeOneOrMoreParameter(syntaxSlot)>
<elseif(syntaxSlot.IsZeroOrMore)>
<writeZeroOrMoreParameter(syntaxSlot)>
<else>
!!<syntaxSlot.ParameterName>: Unsupported cardinality!!
<endif>

%>

writeOptionalParameter(syntaxSlot) ::=<<
context?.<syntaxSlot.ParserRuleName>()
       .Optional(Visit<syntaxSlot.Name>)
       .OfType\<<syntaxSlot.Name>SyntaxSlot>()
>>

writeRequiredParameter(syntaxSlot) ::=<<
context?.<syntaxSlot.ParserRuleName>()
       .Required(Visit<syntaxSlot.Name>)
       .OfType\<<syntaxSlot.Name>SyntaxSlot>()
>>

writeOneOrMoreParameter(syntaxSlot) ::=<<
context?.<syntaxSlot.ParserRuleName>()
       .OneOrMore(Visit<syntaxSlot.Name>)
       .OfType\<<syntaxSlot.Name>SyntaxSlot>()
>>

writeZeroOrMoreParameter(syntaxSlot) ::=<<
context?.<syntaxSlot.ParserRuleName>()
       .ZeroOrMore(Visit<syntaxSlot.Name>)
       .OfType\<<syntaxSlot.Name>SyntaxSlot>()
>>