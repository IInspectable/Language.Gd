delimiters "<", ">"

Begin(model, context) ::=<<
<writeFileHeader(context)>

using JetBrains.Annotations;
using Pharmatechnik.Language.Text;

namespace Pharmatechnik.Language.Gd.Internal {

    <writeAbstractSlots(model.AbstractSlots)>

    <writeSlots(model.Slots)>
}
>>

writeAbstractSlots(abstractSlots) ::=<<
<abstractSlots:writeAbstractSlot(); separator="\r\n">
  
>>

writeAbstractSlot(abstractSlot) ::=<<
abstract partial class <abstractSlot.RuleName>SyntaxSlot: SyntaxSlot {
    
    protected <abstractSlot.RuleName>SyntaxSlot(
        TextExtent textExtent,
        SyntaxKind kind)

        : base(textExtent: textExtent, 
               kind      : kind) {
    }

}

>>


writeSlots(slots) ::=<<
<slots:writeSlot(); separator="\r\n">
  
>>

writeSlot(slot) ::=<<
partial class <slot.RuleName>SyntaxSlot: <if(slot.BaseRuleName)><slot.BaseRuleName>SyntaxSlot <else>SyntaxSlot <endif> {
    
    internal <slot.RuleName>SyntaxSlot(
        TextExtent textExtent, 
        <writeParameterList(slot.Slots)>)

        : base(textExtent: textExtent, 
               kind      : SyntaxKind.<slot.SyntaxKind>) {

        <writePropertyInits(slot.Slots)>
    }

    <writeProperties(slot.Slots)>

	<writeSlotMethod(slot.Slots)>

    public override SyntaxNode Realize(
        SyntaxTree syntaxTree,
        SyntaxNode parent) {

        return new <slot.RuleName>Syntax(syntaxTree, this, parent);
    }
}

>>

// Properties

writeProperties(slotModels) ::=<<
<slotModels:writeProperty(); separator="\r\n">
>>

writeProperty(slotModel)::=<<
<if(slotModel.IsToken)><writeTokenProperty(slotModel)><else><writeSyntaxProperty(slotModel)><endif>
>>

writeTokenProperty(slotModel)::=<<
public TokenSlot <slotModel.Name>Token { get; }
>>

writeSyntaxProperty(slotModel)::=<<
public <syntaxPropertyType(slotModel)> <slotModel.Name><slotModel:pl()> { get; }
>>

syntaxPropertyType(slotModel)::=<<
<if(slotModel.IsToN)>SyntaxListSlot\<<slotModel.Name>SyntaxSlot><else><slotModel.Name>SyntaxSlot<endif>
>>

pl(slotModel)::=<<
<if(slotModel.IsToN)>s<endif>
>>

// Parameter

writeParameterList(slotModels) ::=<<
<slotModels:writeParameter(); anchor, separator=",\r\n">
>>

writeParameter(slotModel) ::=<<
<if(slotModel.IsToken)><writeTokenParameter(slotModel)><else><writeSyntaxParameter(slotModel)><endif>
>>

writeTokenParameter(slotModel) ::=<<
TokenSlot <slotModel.ParameterName>Token
>>

writeSyntaxParameter(slotModel) ::=<<
<syntaxPropertyType(slotModel)> <slotModel.ParameterName><slotModel:pl()>
>>


// Inits

writePropertyInits(slotModels) ::=<<
<slotModels:writePropertyInit(); anchor, separator="\r\n">
>>

writePropertyInit(slotModel) ::=<<
<if(slotModel.IsToken)><writeTokenPropertyInit(slotModel)><else><writeSyntaxPropertyInit(slotModel)><endif>
>>

writeTokenPropertyInit(slotModel) ::=<<
<slotModel.Name>Token = <slotModel.ParameterName>Token;
>>

writeSyntaxPropertyInit(slotModel) ::=<<
<slotModel.Name><slotModel:pl()> = <slotModel.ParameterName><slotModel:pl()>;
>>

// Slot method 

writeSlotMethod(slotModels) ::=<<

public override int SlotCount => <slotModels.Count>;

[CanBeNull]
public override Slot GetSlot(int index) {
	switch(index) {
		<slotModels:writeSlotCase(); anchor, separator="\r\n">
		default:
			return null;
	}
}
>>

writeSlotCases(slotModels) ::=<<
<slotModels.writeSlotCase(); anchor, separator="\r\n">
>>

writeSlotCase(slotModel) ::=<<
case <slotModel.SlotIndex>:
	return <slotModel.Name><if(slotModel.IsToken)>Token<else><slotModel:pl()><endif>;
>>