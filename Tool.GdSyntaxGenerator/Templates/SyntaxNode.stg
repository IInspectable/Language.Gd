delimiters "<", ">"

Begin(model, context) ::=<<
<writeFileHeader(context)>

using JetBrains.Annotations;
using Pharmatechnik.Language.Gd.Internal;

namespace <model.Namespace> {
   
    <writeAbstractSyntaxClasses(model.AbstractSlots)>
    <writeSyntaxClasses(model.Slots)>
}
>>

writeAbstractSyntaxClasses(abstractSlots) ::=<<
<abstractSlots:writeAbstractSyntaxClass(); separator="\r\n">  
>>

writeAbstractSyntaxClass(abstractSlot) ::=<<
public abstract partial class <abstractSlot.RuleName>Syntax: SyntaxNode {
    
    internal <abstractSlot.RuleName>Syntax(
        SyntaxTree syntaxTree, 
        SyntaxSlot slot, 
        SyntaxNode parent,
		int position)

        : base(syntaxTree: syntaxTree, 
               slot      : slot, 
               parent    : parent,
			   position  : position) {

    }

}

>>

writeSyntaxClasses(slots) ::=<<
<slots:writeSyntaxClass(); separator="\r\n">
  
>>

writeSyntaxClass(slot) ::=<<
public partial class <slot.RuleName>Syntax : <if(slot.BaseRuleName)><slot.BaseRuleName>Syntax<else>SyntaxNode<endif><if(slot.IsSection)>, ISectionSyntax<endif><if(slot.IsNamedSection)>, INamedSectionSyntax<endif> {
    
    <writeSyntaxNodeFields(slot.SyntaxSlots)>

    internal <slot.RuleName>Syntax (
        SyntaxTree syntaxTree, 
        <slot.RuleName>SyntaxSlot slot, 
        SyntaxNode parent,
		int position)

        : base(syntaxTree: syntaxTree, 
               slot      : slot, 
               parent    : parent,
			   position  : position) {

    }
	
	<writeSlotProperties(slot.Slots)>

	<writeGetSyntaxNodeMethod(slot.Slots)>

	<writeGetCachedSyntaxNodeMethod(slot.Slots)>

	<writeSectionSyntaxImplementation(slot)>

	<writeVisitorImplementation(slot)>
	    
	[NotNull]
    internal new <slot.RuleName>SyntaxSlot Slot => (<slot.RuleName>SyntaxSlot) base.Slot;

}

>>

writeSlotProperties(slotModels) ::=<<
<slotModels:writeSlotProperty(); anchor, separator="\r\n">
>>

writeSlotProperty(slot) ::=<<
<if(slot.IsToken)><slot:writeTokenProperty()><else><slot:writeSyntaxProperty()><endif>
>>

writeTokenProperty(tokenSlot) ::=<<
public SyntaxToken <tokenSlot.Name>Token => GetSyntaxToken(Slot.<tokenSlot.Name>Token, <tokenSlot.SlotIndex>);
>>

writeSyntaxProperty(syntaxSlot)::=<<
<if(syntaxSlot.IsToN)><syntaxSlot:writeSyntaxPropertyToN()><else><syntaxSlot:writeSyntaxPropertyTo1()><endif>
>>

writeSyntaxPropertyTo1(syntaxSlot)::=<<
[CanBeNull]
public <syntaxSlot.Name>Syntax <syntaxSlot.Name> => (<syntaxSlot.Name>Syntax) GetSyntaxNode(<syntaxSlot.SlotIndex>);
>>

writeSyntaxPropertyToN(syntaxSlot)::=<<
public SyntaxList\<<syntaxSlot.Name>Syntax> <syntaxSlot.PropertyName> => SyntaxList\<<syntaxSlot.Name>Syntax>.CreateList(GetSyntaxNode(<syntaxSlot.SlotIndex>));
>>

writeSyntaxNodeFields(syntaxSlots) ::=<<
<syntaxSlots:writeSyntaxNodeField(); separator="\r\n">
>>

writeSyntaxNodeField(syntaxSlot)::=<<
<syntaxFieldType(syntaxSlot)> <syntaxSlot.FieldName>;
>>

syntaxFieldType(syntaxSlot)::=<<
<if(syntaxSlot.IsToN)>SyntaxNodeList<else><syntaxSlot.Name>Syntax<endif>
>>

// GetCachedSyntaxNodeMethod

writeGetCachedSyntaxNodeMethod(slotModels) ::=<<

[CanBeNull]
private protected override SyntaxNode GetCachedSyntaxNode(int index) {
	switch(index) {
		<slotModels:writeGetCachedSyntaxNodeCase(); anchor>
		default:
			return null;
	}
}
>>

writeGetCachedSyntaxNodeCase(slotModel) ::=<<
<if(slotModel.IsSyntaxNode)>
case <slotModel.SlotIndex>:
	return <slotModel.FieldName>;<endif>
>>

// GetSyntaxNodeMethod

writeGetSyntaxNodeMethod(slotModels) ::=<<

[CanBeNull]
internal override SyntaxNode GetSyntaxNode(int index) {
	switch(index) {
		<slotModels:writeGetSyntaxNodeCase(); anchor>
		default:
			return null;
	}
}
>>

writeGetSyntaxNodeCase(slotModel) ::=<<
<if(slotModel.IsSyntaxNode)>
case <slotModel.SlotIndex>:
	return GetSyntaxNode(ref <slotModel.FieldName>, Slot.<slotModel.PropertyName>, index: <slotModel.SlotIndex>);<endif>
>>

writeSectionSyntaxImplementation(slot) ::=<<
<if(slot.IsSection)>
public SyntaxToken? SectionName => SectionBegin?.<slot.SectionTokenName>;

[CanBeNull]
public <slot.SectionBeginName>Syntax SectionBegin => <slot.SectionBeginName>;

[CanBeNull]
public <slot.SectionEndName>Syntax SectionEnd => <slot.SectionEndName>;

[CanBeNull]
SyntaxNode ISectionSyntax.SectionBegin => SectionBegin;

[CanBeNull]
SyntaxNode ISectionSyntax.SectionEnd => SectionEnd;
<endif>
<if(slot.IsNamedSection)>

SyntaxToken? INamedSectionSyntax.NameBegin => SectionBegin?.<slot.NamedSectionIdentifierName>Token;
SyntaxToken? INamedSectionSyntax.NameEnd   => SectionEnd?.<slot.NamedSectionIdentifierName>Token;<endif>
>>

writeVisitorImplementation(slot) ::=<<
public override void Accept(SyntaxVisitor visitor) {
	visitor.Visit<slot.RuleName>Syntax(this);
}

public override TResult Accept\<TResult>(SyntaxVisitor\<TResult> visitor) {
	return visitor.Visit<slot.RuleName>Syntax(this);
}
>>