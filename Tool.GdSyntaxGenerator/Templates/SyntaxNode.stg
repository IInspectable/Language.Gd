delimiters "<", ">"

Begin(model, context) ::=<<
<writeFileHeader(context)>

using Pharmatechnik.Language.Gd.Internal;

namespace Pharmatechnik.Language.Gd {
   
    <writeAbstractSyntaxClasses(model.AbstractSlots)>
    <writeSyntaxClasses(model.Slots)>
}
>>

writeAbstractSyntaxClasses(abstractSlots) ::=<<
<abstractSlots:writeAbstractSyntaxClass(); separator="\r\n">  
>>

writeAbstractSyntaxClass(abstractSlot) ::=<<
public abstract partial class <abstractSlot.RuleName>Syntax: SyntaxNode {
    
    internal <abstractSlot.RuleName>Syntax(
        SyntaxTree syntaxTree, 
        SyntaxSlot slot, 
        SyntaxNode parent)

        : base(syntaxTree: syntaxTree, 
               slot      : slot, 
               parent    : parent) {

    }

}

>>

writeSyntaxClasses(slots) ::=<<
<slots:writeSyntaxClass(); separator="\r\n">
  
>>

writeSyntaxClass(slot) ::=<<
public partial class <slot.RuleName>Syntax : <if(slot.BaseRuleName)><slot.BaseRuleName>Syntax<else>SyntaxNode<endif> {
    
    <writeSyntaxNodeFields(slot.SyntaxSlots)>

    internal <slot.RuleName>Syntax (
        SyntaxTree syntaxTree, 
        <slot.RuleName>SyntaxSlot slot, 
        SyntaxNode parent)

        : base(syntaxTree: syntaxTree, 
               slot      : slot, 
               parent    : parent) {

    }
	
	<writeSlotProperties(slot.Slots)>
     
    internal new <slot.RuleName>SyntaxSlot Slot => (<slot.RuleName>SyntaxSlot) base.Slot;

}

>>

writeSlotProperties(slotModels) ::=<<
<slotModels:writeSlotProperty(); anchor, separator="\r\n">
>>

writeSlotProperty(slot) ::=<<
<if(slot.IsToken)><slot:writeTokenProperty()><else><slot:writeSyntaxProperty()><endif>
>>

writeTokenProperty(tokenSlotModel) ::=<<
public SyntaxToken <tokenSlotModel.Name>Token => Slot.<tokenSlotModel.Name>Token.Realize(SyntaxTree, this);
>>

writeSyntaxProperty(syntaxSlot)::=<<
public <syntaxSlot.Name>Syntax <syntaxSlot.Name> => GetSyntaxNode(ref <syntaxSlot.FieldName>Syntax, Slot.<syntaxSlot.Name>Syntax);
>>

writeSyntaxNodeFields(syntaxSlots) ::=<<
<syntaxSlots:writeSyntaxNodeField(); separator="\r\n">
>>

writeSyntaxNodeField(syntaxSlot)::=<<
<syntaxSlot.Name>Syntax <syntaxSlot.FieldName>Syntax;
>>